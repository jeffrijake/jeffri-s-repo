Demo project: (e-commerce website)


Dockerfile

	# Use an official Node runtime as the base image
	FROM node:14
	
	# Set the working directory to /app
	WORKDIR /app
	
	# Copy the current directory contents into the container at /app
	COPY . /app
	
	# Install any needed packages specified in package.json
	RUN npm install
	
	# Make port 8080 available to the world outside this container
	EXPOSE 8080
	
	# Run the app when the container launches
	CMD ["npm", "start"]

package.json

	{
	  "name": "my_ecommerce_app",
	  "version": "1.0.0",
	  "description": "A simple e-commerce web application",
	  "main": "server.js",
	  "scripts": {
	    "start": "node server.js"
	  },
	  "dependencies": {
	    "express": "^4.17.1",
	    "mongodb": "^4.2.2"
	  }
	}

server.js

	const express = require('express');
	const app = express();
	const mongoose = require('mongoose');
	
	// Connect to MongoDB
	mongoose.connect('mongodb://localhost:27017/my_ecommerce_db', {
	  useNewUrlParser: true,
	  useUnifiedTopology: true
	});
	
	// Define a schema for products
	const productSchema = new mongoose.Schema({
	  name: String,
	  price: Number,
	  description: String
	});
	
	// Create a model for products
	const Product = mongoose.model('Product', productSchema);
	
	// Define a route for the home page
	app.get('/', (req, res) => {
	  res.send('Welcome to my e-commerce app!');
	});
	
	// Define a route for adding a new product
	app.post('/products', (req, res) => {
	  const product = new Product(req.body);
	  product.save((err) => {
	    if (err) return res.status(500).send(err);
	    res.send(product);
	  });
	});
	
	// Start the server
	app.listen(8080, () => {
	  console.log('Server started on port 8080');
	});



docker build -t my_ecommerce_app .


docker run -p 8080:8080 my_ecommerce_app