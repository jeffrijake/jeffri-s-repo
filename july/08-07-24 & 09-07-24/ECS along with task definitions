terraform-ecs-cluster/
├── main.tf
├── outputs.tf
├── variables.tf
├── versions.tf
└── modules/
    ├── ecs-cluster/
    │   ├── main.tf
    │   ├── outputs.tf
    │   ├── variables.tf
    │   └── versions.tf
    ├── ecs-task-definition/
    │   ├── main.tf
    │   ├── outputs.tf
    │   ├── variables.tf
    │   └── versions.tf
    └── ecs-service/
        ├── main.tf
        ├── outputs.tf
        ├── variables.tf
        └── versions.tf

modules/ecs-task-definition/main.tf


	resource "aws_ecs_task_definition" "this" {
	  family                   = var.family
	  container_definitions    = jsonencode(var.container_definitions)
	  execution_role_arn       = var.execution_role_arn
	  task_role_arn            = var.task_role_arn
	  network_mode             = var.network_mode
	  requires_compatibilities = var.requires_compatibilities
	  cpu                      = var.cpu
	  memory                   = var.memory
	}
	
	output "task_definition_arn" {
	  value = aws_ecs_task_definition.this.arn
	}


modules/ecs-task-definition/variables.tf

	variable "family" {
	  description = "The name of the task family."
	  type        = string
	}
	
	variable "container_definitions" {
	  description = "A list of valid container definitions."
	  type        = list(object({
	    name      = string
	    image     = string
	    cpu       = number
	    memory    = number
	    essential = bool
	    port_mappings = list(object({
	      containerPort = number
	      hostPort      = number
	    }))
	  }))
	}
	
	variable "execution_role_arn" {
	  description = "The ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume."
	  type        = string
	}
	
	variable "task_role_arn" {
	  description = "The ARN of the IAM role that containers in this task can assume."
	  type        = string
	}
	
	variable "network_mode" {
	  description = "The Docker networking mode to use for the containers in the task."
	  type        = string
	  default     = "bridge"
	}
	
	variable "requires_compatibilities" {
	  description = "A set of launch types required by the task."
	  type        = list(string)
	}
	
	variable "cpu" {
	  description = "The number of cpu units used by the task."
	  type        = string
	}
	
	variable "memory" {
	  description = "The amount of memory (in MiB) used by the task."
	  type        = string
	}
modules/ecs-task-definition/outputs.tf

	output "task_definition_arn" {
	  description = "The ARN of the ECS task definition."
	  value       = aws_ecs_task_definition.this.arn
	}

modules/ecs-task-definition/versions.tf

	terraform {
	  required_version = ">= 0.12"
	  required_providers {
	    aws = {
	      source  = "hashicorp/aws"
	      version = "~> 3.0"
	    }
	  }
	}
3. Define the ECS Service Module

modules/ecs-service/main.tf

	resource "aws_ecs_service" "this" {
	  name            = var.service_name
	  cluster         = var.cluster_arn
	  task_definition = var.task_definition_arn
	  desired_count   = var.desired_count
	
	  launch_type = var.launch_type
	
	  network_configuration {
	    subnets         = var.subnets
	    security_groups = var.security_groups
	    assign_public_ip = var.assign_public_ip
	  }
	
	  load_balancer {
	    target_group_arn = var.target_group_arn
	    container_name   = var.container_name
	    container_port   = var.container_port
	  }
	}

	output "service_arn" {
	  value = aws_ecs_service.this.arn
	}
modules/ecs-service/variables.tf

	variable "service_name" {
	  description = "The name of the ECS service."
	  type        = string
	}
	
	variable "cluster_arn" {
	  description = "The ARN of the ECS cluster."
	  type        = string
	}
	
	variable "task_definition_arn" {
	  description = "The ARN of the task definition."
	  type        = string
	}
	
	variable "desired_count" {
	  description = "The desired number of instantiations of the task definition."
	  type        = number
	}
	
	variable "launch_type" {
	  description = "The launch type on which to run your service. The valid values are EC2 and FARGATE."
	  type        = string
	}
	
	variable "subnets" {
	  description = "The subnets associated with the task or service."
	  type        = list(string)
	}
	
	variable "security_groups" {
	  description = "The security groups associated with the task or service."
	  type        = list(string)
	}
	
	variable "assign_public_ip" {
	  description = "Whether the task's elastic network interface receives a public IP address."
	  type        = bool
	}
	
	variable "target_group_arn" {
	  description = "The ARN of the load balancer target group to associate with the service."
	  type        = string
	}
	
	variable "container_name" {
	  description = "The name of the container to associate with the load balancer."
	  type        = string
	}
	
	variable "container_port" {
	  description = "The port on the container to associate with the load balancer."
	  type        = number
	}
modules/ecs-service/outputs.tf

	output "service_arn" {
	  description = "The ARN of the ECS service."
	  value       = aws_ecs_service.this.arn
	}

modules/ecs-service/versions.tf

	terraform {
	  required_version = ">= 0.12"
	  required_providers {
	    aws = {
	      source  = "hashicorp/aws"
	      version = "~> 3.0"
	    }
	  }
	}


4. Use the Task Definition and Service Modules in Your Root Module

main.tf

	provider "aws" {
	  region = var.region
	}
	
	module "ecs_cluster" {
	  source       = "./modules/ecs-cluster"
	  region       = var.region
	  cluster_name = var.cluster_name
	}
	
	module "ecs_task_definition" {
	  source                = "./modules/ecs-task-definition"
	  family                = var.task_family
	  container_definitions = var.container_definitions
	  execution_role_arn    = var.execution_role_arn
	  task_role_arn         = var.task_role_arn
	  network_mode          = var.network_mode
	  requires_compatibilities = var.requires_compatibilities
	  cpu                   = var.task_cpu
	  memory                = var.task_memory
	}
	
	module "ecs_service" {
	  source              = "./modules/ecs-service"
	  service_name        = var.service_name
	  cluster_arn         = module.ecs_cluster.ecs_cluster_arn
	  task_definition_arn = module.ecs_task_definition.task_definition_arn
	  desired_count       = var.desired_count
	  launch_type         = var.launch_type
	  subnets             = var.subnets
	  security_groups     = var.security_groups
	  assign_public_ip    = var.assign_public_ip
	  target_group_arn    = var.target_group_arn
	  container_name      = var.container_name
	  container_port      = var.container_port
	}
	
	output "ecs_cluster_id" {
	  value = module.ecs_cluster.ecs_cluster_id
	}
	
	output "ecs_cluster_arn" {
	  value = module.ecs_cluster.ecs_cluster_arn
	}
	
	output "task_definition_arn" {
	  value = module.ecs_task_definition.task_definition_arn
	}
	
	output "service_arn" {
	  value = module.ecs_service.service_arn
	}

variables.tf

	variable "region" {
	  description = "The AWS region to deploy resources."
	  type        = string
	  default     = "us-west-2"
	}
	
	variable "cluster_name" {
	  description = "The name of the ECS cluster."
	  type        = string
	  default     = "my-ecs-cluster"
	}
	
	variable "task_family" {
	  description = "The name of the task family."
	  type        = string
	  default     = "my-task-family"
	}
	
	variable "container_definitions" {
	  description = "A list of valid container definitions."
	  type        = list(object({
	    name      = string
	    image     = string
	    cpu       = number
	    memory    = number
	    essential = bool
	    port_mappings = list(object({
	      containerPort = number
	      hostPort      = number
	    }))
	  }))
	  default = [
	    {
	      name         = "my-container"
	      image        = "nginx"
	      cpu          = 256
	      memory       = 512
	      essential    = true
	      port_mappings = [
	        {
	          containerPort = 80
	          hostPort      = 80
	        }
	      ]
	    }
	  ]
	}

	variable "execution_role_arn" {
	  description = "The ARN of the task execution role."
	  type        = string
	}
	
	variable "task_role_arn" {
	  description = "The ARN of the IAM role that containers in this task can assume."
	  type        = string
	}
	
	variable "network_mode" {
	  description = "The Docker networking mode to use for the containers in the task."
	  type        = string
	  default     = "bridge"
	}
	
	variable "requires_compatibilities" {
	  description = "A set of launch types required by the task."
	  type        = list(string)
	  default     = ["EC2"]
	}
	
	variable "task_cpu" {
	  description = "The number of CPU units used by the task."
	  type        = string
	  default     = "256"
	}
	
	variable "task_memory" {
	  description = "The amount of memory (in MiB) used by the task."
	  type        = string
	  default     = "512"
	}
	
	variable "service_name" {
	  description = "The name of the ECS service."
	  type        = string
	  default     = "my-ecs-service"
	}
	
	variable "desired_count" {
	  description = "The desired number of instantiations of the task definition."
	  type        = number
	  default     = 1
	}
	
	variable "launch_type" {
	  description = "The launch type on which to run your service. The valid values are EC2 and FARGATE."
	  type        = string
	  default     = "EC2"
	}
	
	variable "subnets" {
	  description = "The subnets associated with the task or service."
	  type        = list(string)
	  default     = []
	}
	
	variable "security_groups" {
	  description = "The security groups associated with the task or service."
	  type        = list(string)
	  default     = []
	}
	
	variable "assign_public_ip" {
	  description = "Whether the task's elastic network interface receives a public IP address."
	  type        = bool
	  default     = false
	}
	
	variable "target_group_arn" {
	  description = "The ARN of the load balancer target group to associate with the service."
	  type        = string
	}
	
	variable "container_name" {
	  description = "The name of the container to associate with the load balancer."
	  type        = string
	}
	
	variable "container_port" {
	  description = "The port on the container to associate with the load balancer."
	  type        = number
	  default     = 80
	}

outputs.tf
	
	output "ecs_cluster_id" {
	  description = "The ID of the ECS cluster."
	  value       = module.ecs_cluster.ecs_cluster_id
	}
	
	output "ecs_cluster_arn" {
	  description = "The ARN of the ECS cluster."
	  value       = module.ecs_cluster.ecs_cluster_arn
	}
	
	output "task_definition_arn" {
	  description = "The ARN of the ECS task definition."
	  value       = module.ecs_task_definition.task_definition_arn
	}
	
	output "service_arn" {
	  description = "The ARN of the ECS service."
	  value       = module.ecs_service.service_arn
	}

versions.tf

	terraform {
	  required_version = ">= 0.12"
	  required_providers {
	    aws = {
	      source  = "hashicorp/aws"
	      version = "~> 3.0"
	    }
	  }
	}

5. Initialize and Apply the Terraform Configuration

Initialize the Terraform configuration:

terraform init

Apply the configuration:

terraform apply