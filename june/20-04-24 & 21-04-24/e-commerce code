Code of E-commerce site:

Basic structure:

	ecommerce-app/
	├── frontend/
	│   ├── Dockerfile
	│   ├── package.json
	│   └── src/
	│       └── index.js
	├── backend/
	│   ├── Dockerfile
	│   ├── requirements.txt
	│   └── app/
	│       └── app.py
	├── nginx/
	│   ├── Dockerfile
	│   └── nginx.conf
	└── docker-compose.yml


frontend:

frontend/Dockerfile:

	# frontend/Dockerfile
	FROM node:14-alpine

	WORKDIR /app

	COPY package.json ./
	RUN npm install

	COPY . .

	EXPOSE 3000
	CMD ["npm", "start"]



frontend/package.json

	{
  	"name": "frontend",
  	"version": "1.0.0",
 	 "scripts": {
   	 "start": "node src/index.js"
 	 },
  	"dependencies": {
    "express": "^4.17.1"
  		}
   	}


frontend/src/index.html:

	// frontend/src/index.js
	const express = require('express');
	const app = express();
	const port = 3000;

	app.get('/', (req, res) => {
	  res.send('Hello from the Frontend!');
	});

	app.listen(port, () => {
  	console.log(`Frontend app listening at http://localhost:${port}`);
	});




Backend:

backend/Dockerfile

	# backend/Dockerfile
	FROM python:3.9-alpine

	WORKDIR /app

	COPY requirements.txt ./
	RUN pip install -r requirements.txt

	COPY . .

	EXPOSE 5000
	CMD ["python", "app/app.py"]



backend/requirements.txt

	Flask==2.0.1
	Werkzeug==2.0.1


backend/app/app.py

	# backend/app/app.py
	from flask import Flask
	app = Flask(__name__)

	@app.route('/')
	def hello_world():
   	 return 'Hello from the Backend!'

	if __name__ == '__main__':
  	  app.run(host='0.0.0.0', port=5000)



nginx:


nginx/Dockerfile

	# nginx/Dockerfile
	FROM nginx:alpine
	
	COPY nginx.conf /etc/nginx/nginx.conf

nginx/nginx.conf

# nginx/nginx.conf
	events {}
	
	http {
	    upstream frontend {
	        server frontend:3000;
	    }
	
	    upstream backend {
	        server backend:5000;
	    }
	
	    server {
	        listen 80;
	
	        location / {
	            proxy_pass http://frontend;
	        }
	
	        location /api {
	            proxy_pass http://backend;
	        }
	    }
	}


docker-compose.yml

	version: '3.8'
	
	services:
	  frontend:
	    build:
	      context: ./frontend
	    volumes:
	      - ./frontend/src:/app/src
	    ports:
	      - "3000:3000"
	
	  backend:
	    build:
	      context: ./backend
	    volumes:
	      - ./backend/app:/app/app
	    ports:
	      - "5000:5000"
	
	  nginx:
	    build:
	      context: ./nginx
	    ports:
	      - "80:80"
	    depends_on:
	      - frontend
	      - backend






